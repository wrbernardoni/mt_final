Word Embeddings of different languages are generally mapped to each other linearly by rotating the matrices until they are properly aligned with each other. To implement our linear orthogonal map, we followed Kabsch’s algorithm (https://en.wikipedia.org/wiki/Kabsch_algorithm), but generalized it to the Nx100 dimension case to account for our 100 dimensions created by Google Word2Vec. 

The steps are broken down as follows.

Step 1) For both the training set, create a Nx100 matrix for both the source and the target languages. 

N represents the number of words in the training set while 100 represents the number of dimensions. 

Step 2) Once the two Nx100 matrices are created, they get translated to make sure each matrix has its centroid at the origin of the coordinate system. 

The centroid is the mean of each point in the Nx100 matrix, and to get it as the origin of the coordinate system, each individual point has the centroid subtracted from it.

Step 3) With the two translated Nx100 matrices, we then calculate the covariance matrix H. 

H is found by first calculating the transpose of the source language matrix and then multiplying sourceTranspose by the target language’s matrix.

Step 4) With H calculated, the next step is to find the rotation matrix R. 

To do that, we compute the Single Vector Decomposition of H, which returns the unitary matrix containing left-singular vectors U, the rectangular diagonal matrix S, and the transpose of the unitary matrix containing right-singular vectors vT. 

Now the unitary matrix containing right-singular vectors V is calculated by taking the transpose of vT and uT is calculated by taking the transpose of U. We then create a diagonal 100x100 matrix of 1s in each point except for the last point, which instead contains the determinant of V multiplied by uT. Call this matrix D.

Finally, to get the rotation matrix R we multiply V and D, and then multiply the result by uT.

Step 5) With R calculated, we now create a Nx100 matrix of the source language for the test data, similar to the ones created in Step 1. We then multiply this Nx100 matrix by the rotation matrix R, returning our linearly mapped rotated matrix.
